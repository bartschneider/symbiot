# Development Docker Compose for Sitemap Scraper Application
# Optimized for ARM64 with hot reloading and development features

services:
  # Backend (Go) - Development
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
      x-bake:
        # Ensure BuildKit cache mounts are effective between builds
        # Requires DOCKER_BUILDKIT=1 and COMPOSE_DOCKER_CLI_BUILD=1 in environment
        pull: false
    platform: linux/amd64
    container_name: windchaser-backend-dev
    environment:
      - NODE_ENV=development
      - PORT=8080
      - CORS_ORIGIN=http://localhost:${FRONTEND_PORT:-5173}
      - DB_HOST=postgres-dev
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-synthora_dev}
      - DB_SSL_MODE=${DB_SSL_MODE:-disable}
      - REDIS_URL=redis-dev:6379
      - FIRECRAWL_BASE_URL=http://firecrawl-service-dev:3001
    ports:
      - "${BACKEND_PORT:-8081}:8080"
    networks:
      - sitemap-dev-network
    depends_on:
      - postgres-dev
      - redis-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Synthora Analytics Frontend (Development)
  synthora-frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      x-bake:
        pull: false
    platform: linux/amd64
    container_name: synthora-frontend-dev
    user: "0:0"
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8081/api/v1
      - VITE_APP_NAME=Synthora Analytics (Dev)
      - VITE_DEV_MODE=true
      - HMR_HOST=localhost
      - HMR_PORT=5173
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
      - "5173:5173"  # Vite HMR port
    volumes:
      - .:/app
    depends_on:
      - backend-dev
      - firecrawl-service-dev
    networks:
      - sitemap-dev-network
    restart: unless-stopped
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Redis for development caching
  redis-dev:
    image: redis:7-alpine
    container_name: sitemap-redis-dev
    platform: linux/amd64
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - sitemap-dev-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru

  # Firecrawl (Node) - Development
  firecrawl-service-dev:
    build:
      context: ./firecrawl-service
      dockerfile: Dockerfile
      x-bake:
        pull: false
    platform: linux/amd64
    container_name: firecrawl-service-dev
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=synthora-postgres-dev
      - DB_PORT=5432
      - DB_NAME=synthora_dev
      - DB_USER=postgres
      - DB_PASSWORD=password
    ports:
      - "3001:3001"
    networks:
      - sitemap-dev-network
    depends_on:
      - postgres-dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Development tools container
  dev-tools:
    image: node:20-alpine
    container_name: sitemap-dev-tools
    platform: linux/amd64
    working_dir: /workspace
    volumes:
      - .:/workspace
      - dev_tools_cache:/root/.npm
    networks:
      - sitemap-dev-network
    profiles:
      - tools
    command: ["sleep", "infinity"]

  # Postgres for development
  postgres-dev:
    image: postgres:15-alpine
    container_name: synthora-postgres-dev
    platform: linux/amd64
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-synthora_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - sitemap-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-synthora_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Networks
networks:
  sitemap-dev-network:
    driver: bridge

# Volumes
volumes:
  redis_dev_data:
    driver: local
  dev_tools_cache:
    driver: local
  postgres_dev_data:
    driver: local